//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//		インクルードファイル
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include	<revolution.h>
#include	<demo.h>
#include<revolution/wpad.h>
#include<revolution/kpad.h>
#include "MEMAllocator.h"
#include "KeyPad.h"

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//		定数定義
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define	SCREEN_WIDTH		(640)						//スクリーン幅
#define	SCREEN_HEIGHT	(480)						//スクリーン高さ
#define	LAND_WIDTH		(1024)						//スクリーン幅
#define	LAND_HEIGHT	(512)						//スクリーン高さ
#define	RIGHTUP			(0)							//右上移動方向
#define	LEFTUP			(1)							//左上移動方向
#define	LEFTDOWN		(2)							//左下移動方向
#define	RIGHTDOWN		(3)							//右下移動方向
#define	HITOFF			(0)							//
#define	HITON			(1)							//
#define DEFSHOTY		(5.0f)
#define PLAYER_HEIGHT	(64)
#define	PLAYER_WIDTH	(80)
#define PLAYERTEXUSIZE  (0.25f)
#define SHOOTNUM		(7)
#define SHOOTSIZE		(10)
#define ENEMYSHOOTSIZE		(6)
#define SHOOTGAP		(15)
#define INVINCIBLE_SIZE (90)
#define ENEMYNUM (3)
#define ENEMY_HEIGHT	(50)
#define	ENEMY_WIDTH	(70)
#define ENEMY0DEFY (SCREEN_HEIGHT / 2 - 150)
#define ENEMY1DEFY  (SCREEN_HEIGHT / 2)
#define ENEMY2DEFY (SCREEN_HEIGHT / 2 + 150)
#define ENEMYSHOOTMAX (255)
#define PLAYERSPEED (5)
#define HEATSIZE		(20.0f)
#define HEATGAP		(30.0f)

#define PLAYERTEX "Player.tpl"
#define SCRENTEX	"scren.tpl"
#define LANDTEX		"land.tpl"
#define ENEMYTEX TEXT("image/enemy.png")
#define BOOWTEX TEXT("image/BOOW.png")
#define CLOUDTEX "Cloud.tpl"
#define ENEMYBOOWTEX TEXT("image/EnemyBOOW.png")
#define SHOOTTEX	"Shoot.tpl"

#define ENEMYSHOOTTEX	TEXT("image/EnemyShoot.png")
#define HEAT1TEX	"Heat1.tpl"
#define HEAT2TEX "Heat2.tpl"
#define	INVINCIBLETEX	 TEXT("image/Invincible.png")
#define	WINTEX	 TEXT("image/WIN.png")
#define	LOSETEX	 TEXT("image/LOSE.png")

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//		グローバル変数
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TPLPalettePtr texLand;
TPLPalettePtr texScren;
TPLPalettePtr texPlayer;
TPLPalettePtr texShoot;
TPLPalettePtr texHeat1;
TPLPalettePtr texHeat2;
GXTexObj texLandObj;
GXTexObj texScrenObj;
GXTexObj texPlayerObj;
GXTexObj texShootObj;
GXTexObj texHeat1Obj;
GXTexObj texHeat2Obj;
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//		グローバル変数
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
typedef struct {
	f32 X;	
	f32 Y;
	f32 Width;
	f32 Height;
	f32 Ustart;
	f32 Vstart;
	f32 Uwidth;
	f32 Vheight;
	TPLPalettePtr Tex;
	GXTexObj TexObj;
	u8	nHp;	//体力
	f32 Flg;
}CHARACTER;
typedef struct {
	TPLPalettePtr Tex;
	GXTexObj TexObj;
	float X;	
	float Y;	
	float Width;
	float Height;
	float Ustart;
	float Vstart;
	float Uwidth;
	float Vheight;
	int nHp;	//体力
	float Flg;
	void Init(int);
	void Update(int);
	void Draw();
	int cnt;
}ENEMY;
typedef struct {
	f32 X;
	f32 Y;
	f32 Width;
	f32 Height;
	f32 Ustart;
	f32 Vstart;
	f32 Uwidth;
	f32 Vheight;
	TPLPalettePtr Tex;
	GXTexObj TexObj;
}IMAGE;
typedef struct {
	u8		Flag;
	f32	X;
	f32	DefX;
	f32	Y;
	bool	Disp;
}SHOOT;

static f32 LandUMove = 0.0f;



f32	Kei2W = 32.0f;										//矩形の幅
f32	Kei2H = 32.0f;										//矩形の高さ





f32	KeiSpeed = 5.5f;								//移動の初期速さ

f32 Kei2X =	SCREEN_WIDTH/2;
f32	Kei2Y = SCREEN_HEIGHT/2;




u8	ShootFlag[SHOOTNUM] = {HITOFF,HITOFF,HITOFF,HITOFF,HITOFF};
f32 ShootX[SHOOTNUM];	// = {5.0f,10.0f,15.0f,20.0f,25.0f};
f32	DefShotX[SHOOTNUM];
f32 ShootY[SHOOTNUM];// = {DEFSHOTY,DEFSHOTY,DEFSHOTY,DEFSHOTY,DEFSHOTY};

u8	HitSwitch = HITOFF;
GXColor	BG_COLOR = {0xfe,0xf2,0x63};	//背景色- 
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//		プロトタイプ宣言
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CHARACTER Player;
CHARACTER	Enemy[ENEMYNUM];
IMAGE Cloud;
SHOOT Shoot[SHOOTNUM];
SHOOT EnemyShoot[ENEMYSHOOTMAX];
u8 EnemyShootNum = 0;
const u8 Anime1[64] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,0xff };//0xff：終了コード
const u8 Anime2[16] = { 8,8,9,9,0xff };
const u8 *Anime_data[2] = { Anime1,Anime2 };
u8 Anime_style;// = 0;
const u8 *Animept = Anime_data[Anime_style];
u8 cnt;
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//		関数宣言
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
f32		UpMove(f32 ,f32 ,f32 ,f32 );				//上移動関数
f32		RightMove(f32 ,f32 ,f32 ,f32 );			//左移動関数
f32		LeftMove(f32 ,f32 ,f32 ,f32  );				//左移動関数
f32		DownMove(f32 ,f32 ,f32 ,f32 );				//下移動関数
bool	HitTest(f32 ,f32 ,f32 ,f32 ,f32 ,f32 , f32 ,f32 );
void	ScreenInitialization();
void	Draw2DCharacter(GXTexObj, f32, f32, f32, f32, f32, f32, f32, f32);
//==========================================================================================================
//		プログラム本編
//==========================================================================================================
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//		エントリーポイント
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
int main(void){
//	GXColor	BG_COLOR = {0x30,0x28,0x33};	//背景色- 

	//		各種初期化
	DEMOInit(NULL);						//主要モジュールも内部で初期化されます｛os,pad,gx,vi}
	init_memory2();	//メモリ確保
	init_KPAD();	//リモコン初期化
	TPLGetPalette(&texLand, LANDTEX);           //2017.5.19追加
	TPLGetPalette(&texScren, SCRENTEX);
	TPLGetPalette(&Player.Tex, PLAYERTEX);
	TPLGetPalette(&texShoot, SHOOTTEX);
	TPLGetPalette(&Cloud.Tex,CLOUDTEX);
	TPLGetPalette(&texHeat1,HEAT1TEX);
	TPLGetPalette(&texHeat2,HEAT2TEX);

	TPLGetGXTexObjFromPalette(texScren, &texScrenObj, 0);
	TPLGetGXTexObjFromPalette(texLand, &texLandObj, 0);   //2017.5.19追加
	TPLGetGXTexObjFromPalette(Player.Tex, &Player.TexObj, 0);   //2017.5.19追加
	TPLGetGXTexObjFromPalette(texShoot, &texShootObj, 0);   //2017.5.19追加
	TPLGetGXTexObjFromPalette(texHeat1,&texHeat1Obj,0);
	TPLGetGXTexObjFromPalette(texHeat2,&texHeat2Obj,0);
	TPLGetGXTexObjFromPalette(Cloud.Tex,&Cloud.TexObj,0);
	for(u8 i = 0;i < SHOOTNUM;i++){
		DefShotX[i] = SHOOTGAP*i + 5.0f;
		ShootX[i] = DefShotX[i];
		ShootY[i] = DEFSHOTY;
	}
	Player.X = 100;
	Player.Y = SCREEN_HEIGHT / 2;
	Player.Width = PLAYER_WIDTH;
	Player.Height = PLAYER_HEIGHT;
	Player.Ustart = 0.0f;
	Player.Vstart = 0.0f;
	Player.Uwidth = (float)1 / 4;
	Player.Vheight = 1.0f;
	Player.nHp = 6;
	for (u8 i = 0; i < ENEMYNUM; i++) {
		Enemy[i].Height = ENEMY_HEIGHT;
		Enemy[i].Width = ENEMY_WIDTH;
		Enemy[i].Flg = 0.0f;
		Enemy[i].nHp = 3;
	}
	Enemy[0].X = 550;
	Enemy[0].Y = ENEMY0DEFY;
	Enemy[1].X = 400;
	Enemy[1].Y = ENEMY1DEFY;
	Enemy[2].X = 550;
	Enemy[2].Y = ENEMY2DEFY;
	for (u8 i = 0; i < SHOOTNUM; i++) {
		Shoot[i].DefX = SHOOTGAP*i + 20.0f;
		Shoot[i].X = Shoot[i].DefX;
		Shoot[i].Y = DEFSHOTY;
		Shoot[i].Flag = HITOFF;
		Shoot[i].Disp = false;
	}
	Cloud.Width =695;
	Cloud.Height =164;
	Cloud.X =SCREEN_WIDTH;
	Cloud.Y = (SCREEN_HEIGHT-70-Cloud.Height/2);

	//		ゲームルーブ
	while(1)
	{
		
		
		work_controller();
		if (Player.nHp > 0) {
			if (kpads[0][0].hold & KPAD_BUTTON_RIGHT) {
				Player.Y = UpMove(Player.X, Player.Y, Player.Width, Player.Height);					//右上移動
			}
			if (kpads[0][0].hold & KPAD_BUTTON_LEFT) {
				Player.Y = DownMove(Player.X, Player.Y, Player.Width, Player.Height);			//左下移動
			}
			if (kpads[0][0].hold & KPAD_BUTTON_UP) {
				Player.X = LeftMove(Player.X, Player.Y, Player.Width, Player.Height);							//左上移動
			}
			if (kpads[0][0].hold & KPAD_BUTTON_DOWN) {
				Player.X = RightMove(Player.X, Player.Y, Player.Width, Player.Height);			//右下移動
			}
			if (kpads[0][0].trig & (KPAD_BUTTON_1 | KPAD_BUTTON_2)) {
				for (u8 i = 0; i < SHOOTNUM; i++) {
					if (Shoot[i].Flag == HITOFF) {
						Shoot[i].X = Player.X + Player.Width / 2;
						Shoot[i].Y = Player.Y + 15;
						Shoot[i].Flag = HITON;
						Shoot[i].Disp = true;
						break;
					}
				}
			}
		}
		//Shooting Move
		for (u8 i = 0; i < SHOOTNUM; i++)
		{
			if (Shoot[i].Flag == HITON) {
				Shoot[i].X += 6.0f;
			}
			if (Shoot[i].X > SCREEN_WIDTH) {
				Shoot[i].Flag = HITOFF;
				Shoot[i].X = Shoot[i].DefX;
				Shoot[i].Y = DEFSHOTY;
				Shoot[i].Disp = false;
			}
		}
		Cloud.X -= 1.0f;
		if (Cloud.X + Cloud.Width / 2 < 0) {
			Cloud.X = SCREEN_WIDTH + Cloud.Width;
		}
		LandUMove += 0.0003f;//land
	
	
		ScreenInitialization();//画面初期化

		//		プリミティブ頂点情報登録開始
		Draw2DCharacter(texScrenObj, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 1, 1);//sky
		Draw2DCharacter(texLandObj, LAND_WIDTH / 2, SCREEN_HEIGHT - LAND_HEIGHT / 2, LAND_WIDTH, LAND_HEIGHT, 0 + LandUMove, 0, 1, 1);
	
		
		Draw2DCharacter(Cloud.TexObj, Cloud.X, Cloud.Y, Cloud.Width, Cloud.Height, 0, 0, 1, 1);//sky
	
		
		Draw2DCharacter(Player.TexObj, Player.X, Player.Y, Player.Width, Player.Height, Player.Ustart, Player.Vstart, Player.Uwidth, Player.Vheight);//Player
		
		for (int i = 0; i < Player.nHp; i++) {
			if (Player.nHp >= 3) {
				for (int n = 0; n < 3; n++) {
					Draw2DCharacter(texHeat1Obj, 500 + n*HEATGAP, 15, HEATSIZE, HEATSIZE, 0, 0, 1, 1);
				}
				for (int n = 0; n < Player.nHp - 3; n++) {
					Draw2DCharacter(texHeat2Obj, 500 + n*HEATGAP, 15, HEATSIZE, HEATSIZE, 0, 0, 1, 1);
				}
			}else{
				for (int n = 0; n < Player.nHp; n++) {
					Draw2DCharacter(texHeat1Obj, 500 + n*HEATGAP, 15, HEATSIZE, HEATSIZE, 0, 0, 1, 1);
				}
			}
		}
		
		//shooting
		for(u8 i = 0; i < SHOOTNUM;i++)
		{
			Draw2DCharacter(texShootObj, Shoot[i].X, Shoot[i].Y, SHOOTSIZE, SHOOTSIZE, 0, 0, 1, 1);	
		}
			
			

		
		//anime
		Player.Ustart = ((*(Animept + cnt))%int(1/Player.Uwidth))*Player.Uwidth;
		cnt += 1;
		if (*(Animept + cnt) == 0xff) { cnt = 0; }
		
		//		レンダリング終了
		DEMODoneRender();
		
		
	}
	
	//		ゲーム終了
	OSHalt("End of sample");
}


//==========================================================================================================
//		関数定義
//==========================================================================================================

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//		上移動関数定義
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
f32	UpMove(f32 X1, f32 Y1, f32 W1, f32 H1) {
	//各頂点の移動
	if (Y1 - H1 / 2 > 0)
	{
		Y1 -= PLAYERSPEED;
	}
	return Y1;
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//		左移動関数定義
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
f32	LeftMove(f32 X1, f32 Y1, f32 W1, f32 H1) {
	//各頂点の移動
	if (X1 - W1 / 2 > 0)
	{
		X1 -= PLAYERSPEED;
	}
	return X1;

}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//		右移動関数定義
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
f32	RightMove(f32 X1, f32 Y1, f32 W1, f32 H1) {
	//各頂点の移動
	if (X1 + W1 / 2 < SCREEN_WIDTH)
	{
		X1 += PLAYERSPEED;
	}
	return X1;
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//		下移動関数定義
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
f32	DownMove(f32 X1, f32 Y1, f32 W1, f32 H1) {
	//各頂点の移動
	if (Y1 + H1 / 2 <SCREEN_HEIGHT)
	{
		Y1 += PLAYERSPEED;
	}
	return Y1;
		
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//		当たり判定処理関数定義
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bool			HitTest(f32 X1,f32 Y1,f32 W1,f32 H1,f32 X2,f32 Y2, f32 W2,f32 H2)
{
	f32 XX1 =X1-W1/2;
	f32	XX2 =X2-W2/2;
	f32 YY1 = Y1-H1/2;
	f32 YY2 = Y2-H2/2;

	if(((YY1+H1 >= YY2) && (YY1 -H2<= YY2)) && ((XX1+ W1 >= XX2) && (XX1-W2 <= XX2)))
	{
		return true;
	}
	else
	{
		return	 false;
	}

}


//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//		Character表示関数定義
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void		Draw2DCharacter(GXTexObj TexObj,f32 X,f32 Y,f32 Width,f32 Height,f32 Ustart,f32 Vstart,f32 Uwidth,f32 Vheight)
{
	GXLoadTexObj(&TexObj, GX_TEXMAP0);
	GXBegin(GX_TRIANGLEFAN, GX_VTXFMT0, 4);

	//		矩形角その１（頂点0）
	GXPosition3f32(X - Width / 2, Y + Height / 2, 0.0f);	//座標
	GXColor3u8(0xff, 0xff, 0xff);
	GXTexCoord2f32(Ustart, Vstart+ Vheight);            //2017.5.19追加
														
	//		矩形角その１（頂点1）
	GXPosition3f32(X - Width / 2, Y - Height / 2, 0.0f);	//座標
	GXColor3u8(0xff, 0xff, 0xff);
	GXTexCoord2f32(Ustart, Vstart);            //2017.5.19追加

	 //		矩形角その１（頂点2）
	GXPosition3f32(X + Width / 2, Y - Height / 2, 0.0f);	//座標
	GXColor3u8(0xff, 0xff, 0xff);
	GXTexCoord2f32(Ustart+ Uwidth, Vstart);            //2017.5.19追加

	 //		矩形角その１（頂点3）
	GXPosition3f32(X + Width / 2, Y + Height / 2, 0.0f);	//座標
	GXColor3u8(0xff, 0xff, 0xff);
	GXTexCoord2f32(Ustart+ Uwidth, Vstart + Vheight);            //2017.5.19追加

	GXEnd();
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//		画面初期化関数定義
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void		ScreenInitialization() {
	//		プロジェクション行列の設定
	Mtx44	projMatrix;	//	プロジェクション行列

						//		正射影行列の作成
	MTXOrtho(projMatrix, 0, SCREEN_HEIGHT, 0, SCREEN_WIDTH, 0.0f, 1.0f);

	//		正射影行列をプロジェクション行列として設定
	GXSetProjection(projMatrix, GX_ORTHOGRAPHIC);

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//		描画処理
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//		画面クリア
	GXSetCopyClear(BG_COLOR, GX_MAX_Z24);

	//		レンダリング開始
	DEMOBeforeRender();

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//		頂点属性設定
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	GXClearVtxDesc();																												//頂点属性情報クリア
																																	//GXSetVtxDesc(GX_VA_POS,GX_DIRECT);
																																	//GXSetVtxDesc(GX_VA_CLR0,GX_DIRECT);																	//座標はダイレクト参照
																																	//GXSetVtxAttrFmt(GX_VTXFMT0,GX_VA_POS,GX_POS_XYZ,GX_F32,0);		//頂点座標属性フォーマット設定
																																	//GXSetVtxAttrFmt(GX_VTXFMT0,GX_VA_CLR0,GX_CLR_RGB,GX_RGB8,0);
																																	//GXSetNumChans(1);
																																	//GXSetNumTevStages(1);
																																	//GXSetTevOrder(GX_TEVSTAGE0,GX_TEXCOORD_NULL,GX_TEXMAP_NULL,GX_COLOR0A0);
																																	//GXSetTevOp(GX_TEVSTAGE0,GX_PASSCLR);

	GXSetVtxDesc(GX_VA_POS, GX_DIRECT);     //座標はダイレクト参照
	GXSetVtxDesc(GX_VA_CLR0, GX_DIRECT);    //単一の属性（色）とその属性に対する参照の仕方を指定
	GXSetVtxDesc(GX_VA_TEX0, GX_DIRECT);    //2017.5.19 テクスチャの設定
	GXSetVtxAttrFmt(GX_VTXFMT0, GX_VA_POS, GX_POS_XYZ, GX_F32, 0);	//頂点座標属性フォーマットの設定
	GXSetVtxAttrFmt(GX_VTXFMT0, GX_VA_CLR0, GX_CLR_RGB, GX_RGB8, 0);//頂点色属性フォーマットの設定
	GXSetVtxAttrFmt(GX_VTXFMT0, GX_VA_TEX0, GX_TEX_ST, GX_F32, 0);  //頂点属性の設定   2017.5.19追加
	GXSetNumChans(1);            //カラーチャンネルの設定
	GXSetNumTevStages(1);        //TEVステージ数の設定
	GXSetNumTexGens(1);          //2017.5.19追加
	GXSetTevOrder(GX_TEVSTAGE0, GX_TEXCOORD0, GX_TEXMAP0, GX_COLOR0A0);  //色・テクスチャの合成準備 2017.5.19修正
																		 //	GXSetTevOp(GX_TEVSTAGE0,GX_PASSCLR);  //TEVのカラーの合成設定
	GXSetTevOp(GX_TEVSTAGE0, GX_REPLACE);  //2017.5.19修正
	GXSetBlendMode(GX_BM_BLEND, GX_BL_SRCALPHA, GX_BL_INVSRCALPHA, GX_LO_CLEAR);  //2017.5.19追加
																				  //	GXLoadTexObj(&texObj, GX_TEXMAP0);     //2017.5.19追加
}

//==========================================================================================================
//		End of sample
//==========================================================================================================
